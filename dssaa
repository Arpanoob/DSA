struct Node {
    // Blueprint for a node of a linked list
    int data;
    Node *next;
    Node() : data(0), next(nullptr) {}
    Node(int x) : data(x), next(nullptr) {}
    Node(int x, Node *next) : data(x), next(next) {}
};

class LinkedList {
public:
    // constructor for creating a linked list 
    // and storing it in 'head'
    LinkedList() {}

    void traversal() {
        Node* itr = head;
        while (itr != nullptr) {
            cout << itr -> data << endl;
            itr = itr -> next;
        }
    }
    
    // 'newNode' - pointer to the node to be inserted
    // 'prevNode' - pointer to the node after which insertion occurs
    void insertion(Node* prevNode, Node* newNode) {
        newNode -> next = prevNode -> next;
        prevNode -> next = newNode;
    }

    // 'targetNode' - pointer to the node to be deleted
    // 'prevNode' - pointer to the node after which deletion occurs
    void deletion(Node* prevNode, Node* targetNode) {
        prevNode -> next = targetNode -> next;
        targetNode -> next = null;
    }

    bool search(int key) {
        Node* itr = head;
        while (itr != null) {
            if (itr -> data == key) 
                return true;
            itr = itr -> next;
        }
        return false; // key not found!
    }
}
